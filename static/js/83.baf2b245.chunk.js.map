{"version":3,"file":"static/js/83.baf2b245.chunk.js","mappings":"oRAGaA,EAAOC,EAAAA,GAAAA,GAAH,4GAOJC,EAAOD,EAAAA,GAAAA,GAAH,6KASJE,GAAWF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,8EAMRI,EAAQJ,EAAAA,GAAAA,GAAH,sE,+OCvBZK,EAAU,mCACVC,EAAW,gCACJC,EAAkB,kCAClBC,EAAa,gDAEbC,EAAgB,mCAAG,oGACLC,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,sCAAmDD,IAD9C,cACtBM,EADsB,yBAErBA,EAASC,MAFY,2CAAH,qDAKhBC,EAAe,mCAAG,WAAOC,GAAP,uFACJJ,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,gCAA6CD,EAA7C,kBAA8DS,IAD1D,cACrBH,EADqB,OAE3BI,QAAQC,IAAIL,EAASC,MAFM,kBAGpBD,EAASC,MAHW,2CAAH,sDAMfK,EAAgB,mCAAG,WAAOC,GAAP,uFACLR,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,iBAA8BY,EAA9B,oBAAkDb,IAD7C,cACtBM,EADsB,yBAErBA,EAASC,MAFY,2CAAH,sDAKhBO,EAAgB,mCAAG,WAAOD,GAAP,uFACLR,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,iBAA8BY,EAA9B,4BAA0Db,IADrD,cACtBM,EADsB,yBAErBA,EAASC,MAFY,2CAAH,sDAKhBQ,EAAgB,mCAAG,WAAOF,GAAP,uFACLR,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,iBAA8BY,EAA9B,4BAA0Db,IADrD,cACtBM,EADsB,yBAErBA,EAASC,MAFY,2CAAH,qD,4ICtBhBS,EAAiB,WAC1B,OAAuBC,EAAAA,EAAAA,MACjBC,GADN,eAC0BC,IAAI,QAC9B,GAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACMC,GAAYC,EAAAA,EAAAA,SAAO,GAuBzB,OArBAC,EAAAA,EAAAA,YAAU,WACFP,IAGJK,EAAUG,SAAU,EACpBC,EAAAA,GAA0BT,GACzBU,MAAK,SAAArB,GACyB,IAAxBA,EAAKsB,QAAQC,SACZC,OAAOC,MAAM,yBACbT,EAAUG,SAAU,GAExBJ,EAAaf,EAAKsB,QACrB,IACAD,MAAK,WACFL,EAAUG,SAAU,CACvB,IACAO,OAAM,SAAAC,GACHxB,QAAQC,IAAIuB,GACZX,EAAUG,SAAU,CACvB,IACJ,GAAE,CAACR,IACAK,EAAUG,SAWJ,SAACS,EAAA,EAAD,KAVC,SAAC,KAAD,UACFd,EAAUe,KAAI,YAAkB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,MACjB,OACI,SAAC,KAAD,WACI,SAAC,KAAD,CAAUC,GAAE,UAAKF,GAAjB,SAAwBC,KADjBD,EAIlB,KAKZ,E,kBC5CYG,EAAO7C,EAAAA,GAAAA,KAAH,0CAIJ8C,EAAQ9C,EAAAA,GAAAA,MAAH,gNAUL+C,EAAS/C,EAAAA,GAAAA,OAAH,kdAkBNgD,EAAOhD,EAAAA,GAAAA,KAAH,qECAjB,EA7Be,WACX,OAA4BsB,EAAAA,EAAAA,MAAnB2B,GAAT,eACA,GAAsCxB,EAAAA,EAAAA,UAAS,IAA/C,eAAOyB,EAAP,KAAoBC,EAApB,KAgBA,OACI,UAACN,EAAD,YACI,UAACG,EAAD,CAAMI,SAhBI,SAAAC,GACdA,EAAMC,iBACa,KAAhBJ,GAIHD,EAAgB,CAAC1B,KAAM2B,IACvBG,EAAME,cAAcC,SAJhBpB,OAAOC,MAAM,uBAKpB,EAQO,WACI,SAACS,EAAD,CAAOW,KAAK,OAAOC,SAPX,SAAAL,GAChB,IAAOM,EAASN,EAAME,cAAfI,MACPR,EAAeQ,EAAMC,OACxB,EAIqDC,YAAY,mBAAmBC,WAAS,KAClF,SAACf,EAAD,CAAQU,KAAK,SAAb,wBAEJ,SAACpC,EAAD,MAGX,C","sources":["components/ListFilms/FilmsList.styled.jsx","components/MoviesAPI/MoviesAPI.jsx","components/ListFilms/FilmSearchList.jsx","pages/Movies/Movies.styled.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nexport const List = styled.ul`\n    list-style: none;\n    padding: 0;\n    max-width: 800px;\n    margin: 0 auto;\n`;\n\nexport const Item = styled.li`\n    padding: 5px;\n    border-radius: 5px;\n    transition: background-color 100ms linear;\n    :hover {\n        background-color: #E8D2A6;\n    }\n`;\n\nexport const LinkFilm = styled(Link)`\n    color: black;\n    text-transform: capitalize;\n\n`;\n\nexport const Title = styled.h2`\n    font-size: 24px;\n    text-align: center;\n`","import axios from 'axios';\n\nconst KEY_API = '1e08b8d990c5fa2af74f683ca643ea53';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nexport const BASE_IMAGES_URL = 'https://image.tmdb.org/t/p/w500';\nexport const DEFAULT_IMG =\"https://i.ibb.co/cLM23Z5/default-card-img.jpg\";\n\nexport const getTradingMovies = async () => {\n    const response = await axios.get(`${BASE_URL}trending/movie/day?api_key=${KEY_API}`);\n    return response.data\n};\n\nexport const getSearchMovies = async (query) => {\n    const response = await axios.get(`${BASE_URL}search/movie?api_key=${KEY_API}&query=${query}`);\n    console.log(response.data)\n    return response.data\n};\n\nexport const getMoviesDetails = async (movie_id) => {\n    const response = await axios.get(`${BASE_URL}movie/${movie_id}?api_key=${KEY_API}`);\n    return response.data\n}\n\nexport const getMoviesCredits = async (movie_id) => {\n    const response = await axios.get(`${BASE_URL}movie/${movie_id}/credits?api_key=${KEY_API}`);\n    return response.data\n}\n\nexport const getMoviesReviews = async (movie_id) => {\n    const response = await axios.get(`${BASE_URL}movie/${movie_id}/reviews?api_key=${KEY_API}`);\n    return response.data\n}\n\n","import { useEffect, useRef, useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { List, Item, LinkFilm } from \"./FilmsList.styled\";\nimport * as MoviesAPI from '../MoviesAPI//MoviesAPI';\nimport { LoadSpin } from \"components/LoadSpin/LoadSpin\";\n\nexport const FilmSearchList = () => {\n    const [searchParams] = useSearchParams();\n    const name = searchParams.get(\"name\");\n    const [listFilms, setListFilms] = useState([]);\n    const isLoading = useRef(false);\n\n    useEffect(() => {\n        if(!name) {\n            return;\n        }\n        isLoading.current = true;\n        MoviesAPI.getSearchMovies(name)\n        .then(data => {\n            if(data.results.length === 0) {\n                window.alert('Oops...Found nothing.');\n                isLoading.current = false;\n            }\n            setListFilms(data.results);\n        })\n        .then(() => {\n            isLoading.current = false;\n        })\n        .catch(error => {\n            console.log(error)\n            isLoading.current = false;\n        });\n    }, [name])\n    if(!isLoading.current) {\n        return <List>\n            {listFilms.map(({id, title}) => {\n                return(\n                    <Item key={id}>\n                        <LinkFilm to={`${id}`}>{title}</LinkFilm>\n                    </Item>\n                )\n            })}\n        </List>\n    } else {\n       return <LoadSpin/>\n    }\n}","import styled from \"styled-components\";\n\nexport const Main = styled.main`\n    width: 100%;\n`;\n\nexport const Input = styled.input`\n    font-size: 18px;\n    padding: 7px 10px;\n    outline: transparent;\n    border: 2px solid #F48484;\n    border-radius: 10px 0 0 10px;\n    border-right: none;\n    width: 300px;\n`;\n\nexport const Button = styled.button`\n    font-size: 18px;\n    color: black;\n    padding: 7px 10px;\n    background-color: #E8D2A6;\n    border: 2px solid #E8D2A6;\n    border-radius: 0 10px 10px 0;\n    transition-property: background-color, border-color, color; \n    transition-timing-function: linear;\n    transition-duration: 250ms;\n    :hover {\n        background-color: #F48484;\n        border-color: #F48484;\n        color: white;\n        cursor: pointer;\n    }\n`;\n\nexport const Form = styled.form`\n    text-align: center;\n    padding: 15px;\n`;","import { FilmSearchList } from \"components/ListFilms/FilmSearchList\";\nimport { useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\"\nimport { Main, Input, Button, Form } from \"./Movies.styled\"\n\nconst Movies = () => {\n    const [, setSearchParams] = useSearchParams();\n    const [searchQuery, setSearchQuery] = useState('');\n\n    const setSearch = event => {\n        event.preventDefault();\n        if(searchQuery === '') {\n            window.alert('Enter query, please.')\n            return;\n        };\n        setSearchParams({name: searchQuery})\n        event.currentTarget.reset()\n    }\n\n    const handleInput = event => {\n        const {value} = event.currentTarget;\n        setSearchQuery(value.trim())\n    }\n    return(\n        <Main>\n            <Form onSubmit={setSearch}>\n                <Input type=\"text\" onChange={handleInput} placeholder=\"Enter name films\" autoFocus/>\n                <Button type=\"submit\">Search</Button>\n            </Form>\n            <FilmSearchList/>\n        </Main>\n    )\n}\n\nexport default Movies;"],"names":["List","styled","Item","LinkFilm","Link","Title","KEY_API","BASE_URL","BASE_IMAGES_URL","DEFAULT_IMG","getTradingMovies","axios","response","data","getSearchMovies","query","console","log","getMoviesDetails","movie_id","getMoviesCredits","getMoviesReviews","FilmSearchList","useSearchParams","name","get","useState","listFilms","setListFilms","isLoading","useRef","useEffect","current","MoviesAPI","then","results","length","window","alert","catch","error","LoadSpin","map","id","title","to","Main","Input","Button","Form","setSearchParams","searchQuery","setSearchQuery","onSubmit","event","preventDefault","currentTarget","reset","type","onChange","value","trim","placeholder","autoFocus"],"sourceRoot":""}