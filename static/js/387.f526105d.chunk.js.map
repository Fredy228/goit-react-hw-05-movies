{"version":3,"file":"static/js/387.f526105d.chunk.js","mappings":"+VAEMA,EAAU,mCACVC,EAAW,gCACJC,EAAkB,kCAClBC,EAAa,gDAEbC,EAAgB,mCAAG,oGACLC,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,sCAAmDD,IAD9C,cACtBM,EADsB,yBAErBA,EAASC,MAFY,2CAAH,qDAKhBC,EAAe,mCAAG,WAAOC,GAAP,uFACJJ,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,gCAA6CD,EAA7C,kBAA8DS,IAD1D,cACrBH,EADqB,OAE3BI,QAAQC,IAAIL,EAASC,MAFM,kBAGpBD,EAASC,MAHW,2CAAH,sDAMfK,EAAgB,mCAAG,WAAOC,GAAP,uFACLR,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,iBAA8BY,EAA9B,oBAAkDb,IAD7C,cACtBM,EADsB,yBAErBA,EAASC,MAFY,2CAAH,sDAKhBO,EAAgB,mCAAG,WAAOD,GAAP,uFACLR,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,iBAA8BY,EAA9B,4BAA0Db,IADrD,cACtBM,EADsB,yBAErBA,EAASC,MAFY,2CAAH,sDAKhBQ,EAAgB,mCAAG,WAAOF,GAAP,uFACLR,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,iBAA8BY,EAA9B,4BAA0Db,IADrD,cACtBM,EADsB,yBAErBA,EAASC,MAFY,2CAAH,qD,8IC1BhBS,EAAcC,EAAAA,GAAAA,GAAH,qEAKXC,EAAcD,EAAAA,GAAAA,GAAH,6DAIXE,EAAeF,EAAAA,GAAAA,GAAH,8CAIZG,EAAcH,EAAAA,GAAAA,EAAH,8C,SC2BxB,EApCgB,WACZ,IAAOI,GAAWC,EAAAA,EAAAA,MAAXD,QACP,GAA0CE,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACMC,GAAYC,EAAAA,EAAAA,SAAO,GAazB,IAXAC,EAAAA,EAAAA,YAAU,WACNF,EAAUG,SAAU,EACpBC,EAAAA,GAA2BT,GAASU,MAAK,SAAAxB,GACrCkB,EAAiBlB,EAAKyB,QACzB,IAAED,MAAK,WACJL,EAAUG,SAAU,CACvB,IAAEI,OAAM,SAAAC,GACLxB,QAAQC,IAAIuB,GACZR,EAAUG,SAAU,CACvB,GACJ,GAAE,CAACR,KACAK,EAAUG,QACV,OAAGL,EAAcW,OAAS,GACf,SAACnB,EAAD,UACNQ,EAAcY,KAAI,YAA4B,IAA1BC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,GAClC,OACI,UAACrB,EAAD,YACI,UAACC,EAAD,sBAAuBkB,MACvB,SAACjB,EAAD,UAAckB,MAFAC,EAKzB,OAGM,SAACnB,EAAD,0DAGVoB,EAAA,CAER,C","sources":["components/MoviesAPI/MoviesAPI.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY_API = '1e08b8d990c5fa2af74f683ca643ea53';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nexport const BASE_IMAGES_URL = 'https://image.tmdb.org/t/p/w500';\nexport const DEFAULT_IMG =\"https://i.ibb.co/cLM23Z5/default-card-img.jpg\";\n\nexport const getTradingMovies = async () => {\n    const response = await axios.get(`${BASE_URL}trending/movie/day?api_key=${KEY_API}`);\n    return response.data\n};\n\nexport const getSearchMovies = async (query) => {\n    const response = await axios.get(`${BASE_URL}search/movie?api_key=${KEY_API}&query=${query}`);\n    console.log(response.data)\n    return response.data\n};\n\nexport const getMoviesDetails = async (movie_id) => {\n    const response = await axios.get(`${BASE_URL}movie/${movie_id}?api_key=${KEY_API}`);\n    return response.data\n}\n\nexport const getMoviesCredits = async (movie_id) => {\n    const response = await axios.get(`${BASE_URL}movie/${movie_id}/credits?api_key=${KEY_API}`);\n    return response.data\n}\n\nexport const getMoviesReviews = async (movie_id) => {\n    const response = await axios.get(`${BASE_URL}movie/${movie_id}/reviews?api_key=${KEY_API}`);\n    return response.data\n}\n\n","import styled from \"styled-components\";\n\nexport const ListReviews = styled.ul`\n    list-style: none;\n    padding: 0 15px;\n`;\n\nexport const ItemReviews = styled.li`\n    border-bottom: 1px solid black;\n`;\n\nexport const TitleReviews = styled.h4`\n    font-size: 16px;\n`;\n\nexport const TextReviews = styled.p`\n    font-size: 16px;\n`;\n\n","import { LoadSpin } from \"components/LoadSpin/LoadSpin\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport * as MoviesAPI from '../MoviesAPI/MoviesAPI';\nimport { ItemReviews, ListReviews, TextReviews, TitleReviews } from \"./Reviews.styled\";\n\nconst Reviews = () => {\n    const {movieId} = useParams();\n    const [moviesReviews, setMoviesReviews] = useState([]);\n    const isLoading = useRef(false);\n\n    useEffect(() => {\n        isLoading.current = true;\n        MoviesAPI.getMoviesReviews(movieId).then(data => {\n            setMoviesReviews(data.results);\n        }).then(() => {\n            isLoading.current = false;\n        }).catch(error => {\n            console.log(error);\n            isLoading.current = false;\n        })\n    }, [movieId])\n    if(!isLoading.current) {\n        if(moviesReviews.length > 0) {\n            return <ListReviews>\n            {moviesReviews.map(({author, content, id}) => {\n                return(\n                    <ItemReviews key={id}>\n                        <TitleReviews>Author: {author}</TitleReviews>\n                        <TextReviews>{content}</TextReviews>\n                    </ItemReviews>\n                )\n            })}\n        </ListReviews>\n        } else {\n            return <TextReviews>We don't have any reviews for this movie...</TextReviews>\n        }\n    } else {\n        <LoadSpin/>\n    }\n}\n\nexport default Reviews;"],"names":["KEY_API","BASE_URL","BASE_IMAGES_URL","DEFAULT_IMG","getTradingMovies","axios","response","data","getSearchMovies","query","console","log","getMoviesDetails","movie_id","getMoviesCredits","getMoviesReviews","ListReviews","styled","ItemReviews","TitleReviews","TextReviews","movieId","useParams","useState","moviesReviews","setMoviesReviews","isLoading","useRef","useEffect","current","MoviesAPI","then","results","catch","error","length","map","author","content","id","LoadSpin"],"sourceRoot":""}